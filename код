```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Web App</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 10px;
            background-color: #f0f2f5;
        }
        .app-container {
            max-width: 600px;
            margin: 0 auto;
        }
        .menu-button {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
        .result-container {
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const tg = window.Telegram.WebApp;

        function CryptoWebApp() {
            const [view, setView] = useState('main');
            const [spotPrices, setSpotPrices] = useState([]);
            const [p2pPrices, setP2pPrices] = useState([]);
            const [profitCalculator, setProfitCalculator] = useState({
                buyPrice: '',
                sellPrice: '',
                amount: ''
            });
            const [profitResult, setProfitResult] = useState(null);

            useEffect(() => {
                tg.ready();
                tg.expand();
            }, []);

            const mockSpotPrices = [
                { exchange: 'Binance', symbol: 'BTC/USDT', last_price: 65000 },
                { exchange: 'Bybit', symbol: 'BTC/USDT', last_price: 64800 },
                { exchange: 'OKX', symbol: 'BTC/USDT', last_price: 65100 }
            ];

            const mockP2PPrices = [
                { platform: 'Binance', buy_currency: 'BTC', price: 64500 },
                { platform: 'OKX', buy_currency: 'BTC', price: 64700 }
            ];

            const handleSpotRates = () => {
                // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 
                setSpotPrices(mockSpotPrices);
                setView('spot_rates');
            };

            const handleP2PRates = () => {
                // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                setP2pPrices(mockP2PPrices);
                setView('p2p_rates');
            };

            const handleProfitCalculator = () => {
                setView('profit_calculator');
            };

            const calculateProfit = () => {
                const { buyPrice, sellPrice, amount } = profitCalculator;
                const totalBuyCost = buyPrice * amount;
                const totalSellRevenue = sellPrice * amount;
                const netProfit = totalSellRevenue - totalBuyCost;
                const profitPercentage = (netProfit / totalBuyCost) * 100;

                setProfitResult({
                    totalBuyCost,
                    totalSellRevenue,
                    netProfit,
                    profitPercentage
                });
            };

            const renderMainMenu = () => (
                <div className="app-container">
                    <h1>Crypto Web App</h1>
                    <button className="menu-button" onClick={handleSpotRates}>
                        üìä SPOT –ö—É—Ä—Å—ã
                    </button>
                    <button className="menu-button" onClick={handleP2PRates}>
                        üí∞ P2P –ö—É—Ä—Å—ã
                    </button>
                    <button className="menu-button" onClick={handleProfitCalculator}>
                        üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ü—Ä–∏–±—ã–ª–∏
                    </button>
                </div>
            );

            const renderSpotRates = () => (
                <div className="app-container">
                    <h2>SPOT –ö—É—Ä—Å—ã</h2>
                    <button onClick={() => setView('main')}>–ù–∞–∑–∞–¥</button>
                    <div className="result-container">
                        {spotPrices.map((price, index) => (
                            <div key={index}>
                                <p>–ë–∏—Ä–∂–∞: {price.exchange}</p>
                                <p>–°–∏–º–≤–æ–ª: {price.symbol}</p>
                                <p>–¶–µ–Ω–∞: {price.last_price}</p>
                            </div>
                        ))}
                    </div>
                </div>
            );

            const renderP2PRates = () => (
                <div className="app-container">
                    <h2>P2P –ö—É—Ä—Å—ã</h2>
                    <button onClick={() => setView('main')}>–ù–∞–∑–∞–¥</button>
                    <div className="result-container">
                        {p2pPrices.map((price, index) => (
                            <div key={index}>
                                <p>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {price.platform}</p>
                                <p>–í–∞–ª—é—Ç–∞: {price.buy_currency}</p>
                                <p>–¶–µ–Ω–∞: {price.price}</p>
                            </div>
                        ))}
                    </div>
                </div>
            );

            const renderProfitCalculator = () => (
                <div className="app-container">
                    <h2>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ü—Ä–∏–±—ã–ª–∏</h2>
                    <button onClick={() => setView('main')}>–ù–∞–∑–∞–¥</button>
                    <div className="result-container">
                        <input 
                            type="number" 
                            placeholder="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"
                            value={profitCalculator.buyPrice}
                            onChange={(e) => setProfitCalculator({
                                ...profitCalculator, 
                                buyPrice: e.target.value
                            })}
                        />
                        <input 
                            type="number" 
                            placeholder="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
                            value={profitCalculator.sellPrice}
                            onChange={(e) => setProfitCalculator({
                                ...profitCalculator, 
                                sellPrice: e.target.value
                            })}
                        />
                        <input 
                            type="number" 
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                            value={profitCalculator.amount}
                            onChange={(e) => setProfitCalculator({
                                ...profitCalculator, 
                                amount: e.target.value
                            })}
                        />
                        <button onClick={calculateProfit}>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>

                        {profitResult && (
                            <div>
                                <p>–ó–∞—Ç—Ä–∞—Ç—ã: {profitResult.totalBuyCost}</p>
                                <p>–í—ã—Ä—É—á–∫–∞: {profitResult.totalSellRevenue}</p>
                                <p>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profitResult.netProfit}</p>
                                <p>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {profitResult.profitPercentage.toFixed(2)}%</p>
                            </div>
                        )}
                    </div>
                </div>
            );

            return (
                <div>
                    {view === 'main' && renderMainMenu()}
                    {view === 'spot_rates' && renderSpotRates()}
                    {view === 'p2p_rates' && renderP2PRates()}
                    {view === 'profit_calculator' && renderProfitCalculator()}
                </div>
            );
        }

        ReactDOM.render(<CryptoWebApp />, document.getElementById('root'));
    </script>
</body>
</html>
```
